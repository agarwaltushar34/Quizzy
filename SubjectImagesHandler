package tronbox.networking;


import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;

import tronbox.arena.LoadingScreen;
import tronbox.arena.MessageSender;
import tronbox.social.R;
import tronbox.welcome.MasterHomeScreen;
import tronbox.welcome.QuizzyApplication;
import tronbox.welcome.SendUserCredentials;
import tronbox.welcome.SharedPrefrenceStorage;
import tronbox.welcome.Test;
import tronbox.welcome.UpdateActivity;

public class SubjectImagesHandler extends Handler{

    private Context context;

    public SubjectImagesHandler(Looper looper, Context context){
        super(looper);

        this.context = context;
    }

    @Override
    public void handleMessage(Message msg) {

         Bundle data = msg.getData();
         String link = data.getString("url");
         String name = data.getString("name");

        Log.w("ImageToBeDownloaded", link+"\n"+name);

        try {

            Intent intent = new Intent();
            intent.setAction("LOADING_ACTIONS");
            intent.putExtra("TAG", "NEW_MESSAGE");
            intent.putExtra("MESSAGE", "Downloading Image "+data.getInt("count"));
            context.sendBroadcast(intent);

                java.net.URL url = new java.net.URL(link);
                HttpURLConnection connection = (HttpURLConnection)url.openConnection();
                connection.setDoInput(true);
                connection.connect();
                InputStream input = connection.getInputStream();
                Bitmap myBitmap = BitmapFactory.decodeStream(input);
                SaveImage(myBitmap, name);


            Log.w("ImageName", "Name"+name+"\nUrl = "+link);

            Log.w("FRIEND_REQUEST", "DOWNLOADING IMAGES");


                if(data.containsKey("meta")){

                    String meta = data.getString("meta");

                    if(meta.equals("last")){

                        QuizzyApplication.DownloadOver = true;

                        ((UpdateActivity)context).callHome();

                        Log.w("Last Image Downloaded", "Last Image Downloaded");

                    }else if(meta.equals("fake")){


                    }else if(meta.equals("last_fake_image")){


                        ((LoadingScreen)context).callQuizzyArena("Play");

                    }else if(meta.equals("last_fresh_image")){


                        Intent intent1 = new Intent();
                        intent1.setAction("LOADING_ACTIONS");
                        intent1.putExtra("TAG", "START_PLAYING");
                        context.sendBroadcast(intent1);

                    }else if(meta.equals("last_challenge_image")){


                        Log.w("FRIEND_REQUEST", "DOWNLOADING LAST IMAGES");

                        ((LoadingScreen)context).callQuizzyArena("CHALLENGE");

                    }else if(meta.equals("FACEBOOK_LAST")){

                        Log.w("FRIEND_REQUEST", "DOWNLOADING LAST IMAGES");

                        Bundle bundle = SharedPrefrenceStorage.getProfileInfo(context);

                        new SendUserCredentials(context).execute(bundle.getString("Name"), bundle.getString("Dob"), bundle.getString("Dob"), bundle.getString("Location"), SharedPrefrenceStorage.GetRegId(context), bundle.getString("FacebookId"));

                    }

                }

                Log.w("Image Downloaded", "Image Downloaded "+name);


        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    public void SaveImage(Bitmap finalBitmap, String name) {

        try {

            FileOutputStream out1  = context.openFileOutput(name, Context.MODE_PRIVATE);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            finalBitmap.compress(Bitmap.CompressFormat.PNG, 100, bos);
            byte[] buffer = bos.toByteArray();
            out1.write(buffer, 0, buffer.length);
            out1.close();
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    public Boolean checkBitmap(String name){

        Boolean check = false;

        try {

            if(context.openFileInput(name) != null){

                check = true;

            }else{

                check = false;
            }

        } catch (FileNotFoundException e1) {

            check = false;

        }

        return check;
    }
}
